#!/usr/bin/env bash


export APP_HOME="$(cd "`dirname "$0"`"/../..; pwd)"

MONITOR="Monitor"
HIPPO_DIR=${APP_HOME}/hippo
HIPPO_BIN_DIR=${HIPPO_DIR}/bin
HIPPO_SBIN_DIR=${HIPPO_DIR}/sbin
HIPPO_CONF_DIR=${HIPPO_DIR}/etc
HIPPO_LOG_DIR=${HIPPO_DIR}/var/logs


. "${HIPPO_CONF_DIR}/env.sh"
. "${HIPPO_BIN_DIR}/runtime-env-info.sh"

while read assignment; do
  if [[ $assignment != *"#"* ]] ; then
    if [ ! -z "$assignment" -a "$assignment" != " " ]; then
      export "$assignment"
    fi
  fi


done < ${HIPPO_CONF_DIR}/env.sh


function usage ()
{
    temp_serivce_name="$(basename ${APP_HOME})"
    echo "[monitor-ps]
    Usage: `basename $0 ` SERVICE
    e.g. `basename $0` "$temp_serivce_name"
    "
}

args=`getopt -o h --long help:: -n 'monitor-status' -- "$@"`

if [ $? != 0 ] ; then
  echo "terminating..." >&2 ;
  exit 1 ;
fi

eval set -- "$args"


while true ; do
  case "$1" in
    -h|--help )
      usage
      exit
      ;;
    --)
      shift ;
      break ;;
    *)
      echo "internal error!" ;
      exit 1 ;;
  esac
done

for arg do
   PROJECT_NAME=$arg
done

# check for required args
if [[ -z $PROJECT_NAME ]] ; then
  echo "$(basename $0): missing SERVICE"
  usage
  exit 1
fi

function status() {
  status_monitor
  monitor_retcode=$?
  status_service
  service_retcode=$?
  if [[ $monitor_retcode -eq 0 && $service_retcode -eq 0 ]]; then
    RETVAL=0
  else
    RETVAL=1
  fi

  exit $RETVAL

}

function status_monitor() {
  sh ${HIPPO_SBIN_DIR}/daemon.sh $MONITOR status 1
}

function status_service() {
  sh ${HIPPO_SBIN_DIR}/daemon.sh $PROJECT_NAME status 1
}


status
